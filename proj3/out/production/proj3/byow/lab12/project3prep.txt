Q: Can you think of an analogy between the process of tesselating hexagons and randomly generating a world using rooms and hallways? 
What is the hexagon and what is the tesselation on the Project 3 side?

A: I think the hexagon roughly equates to a square/rectangle representing a room/hallway in Project 3.
Therefore, the analogy between the process of tesselating hexagons and randomly generating a world is finding
neighbors for each hexagon//room/hallway.

-----
Q: If you were to start working on world generation, what kind of method would you think of writing first? 
Think back to the lab and the process used to eventually get to tesselating hexagons.

A: I would think of writing a method for adding a room and/or hallway first with the specified length/area.

-----
Q: What distinguishes a hallway from a room? How are they similar?

A: They are both essentially rectangles, but a room has a width larger than 1, while a hallway would have a
width equal to 1 (generally with a greater height).

-----
Q: For tesselating hexagons, one of the hardest parts is figuring out where to place each hexagon/how to easily place hexagons on screen in an algorithmic way. 
After looking at your own implemention, consider the implementation provided near the end of the lab. 
How did your implementation differ from the given one? What lessons can be learned from it?

A: No implementation was provided near the end of the lab, but mine differed from Prof Hug's suggested method by starting with the middle
column and going left and right. I think this caused some bugs in overlapping hexagons. I learned that it's very important to
break down problems into smaller steps.

-----
Q: Consider an algorithm for placing rooms and hallways on your map. 
Ideally, consider many algorithms and think about what makes some easier or harder to implement. Try and bring those ideas together into a single simple algorithm which accomplishes the task. 
In general, algorithms with as few edge cases as possible are better algorithms.

A: Similar to the lab, have helper methods/instance variables to record the top, bottom, right, and left, edges of
each hallway and room. Use these to randomly add hallways and rooms together.
